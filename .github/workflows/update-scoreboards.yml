name: Update Scoreboards

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  update-scoreboards:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Run Tests and Update Scoreboards
        run: |
          for challenge_dir in challenge-*/; do
            challenge_name=$(basename "$challenge_dir")
            echo "Processing $challenge_name"

            # Ensure go.mod exists
            if [ ! -f "$challenge_dir/go.mod" ]; then
              (cd "$challenge_dir" && go mod init "$challenge_name")
            fi

            # Initialize scoreboard
            scoreboard="$challenge_dir/SCOREBOARD.md"
            echo "# Scoreboard for $challenge_name" > "$scoreboard"
            echo "| Username   | Passed Tests | Total Tests |" >> "$scoreboard"
            echo "|------------|--------------|-------------|" >> "$scoreboard"

            # Run tests for all submissions
            for submission_dir in "$challenge_dir"/submissions/*/; do
              # Skip if not a directory
              [ -d "$submission_dir" ] || continue

              USERNAME=$(basename "$submission_dir")
              echo "Testing submission from $USERNAME"

              # Copy submission files
              cp "$submission_dir"/*.go "$challenge_dir/" 2>/dev/null || true

              # Run tests and capture output
              (cd "$challenge_dir" && go test -v) > "$submission_dir/test_results.txt" 2>&1 || true

              # Output test results for debugging
              echo "Test results for $USERNAME:"
              cat "$submission_dir/test_results.txt"

              # Parse test results (allow leading spaces before '--- PASS:' or '--- FAIL:')
              PASS_COUNT=$(grep -c "^[[:space:]]*--- PASS: " "$submission_dir/test_results.txt" || true)
              FAIL_COUNT=$(grep -c "^[[:space:]]*--- FAIL: " "$submission_dir/test_results.txt" || true)
              TOTAL_TESTS=$((PASS_COUNT + FAIL_COUNT))

              # Update scoreboard
              echo "| $USERNAME | $PASS_COUNT | $TOTAL_TESTS |" >> "$scoreboard"

              # Clean up copied files
              rm -f "$challenge_dir"/*.go
            done

            # -------------------
            # Sort scoreboard by Passed Tests, descending
            # -------------------
            # Skip first 3 lines:
            #  1) # Scoreboard for ...
            #  2) | Username   | Passed Tests | Total Tests |
            #  3) |------------|--------------|-------------|
            if [ -s "$scoreboard" ]; then
              temp_sorted=$(mktemp)
              head -n 3 "$scoreboard" > "$temp_sorted"

              # Starting from line 4, sort by the 3rd column (Passed Tests) numerically, descending
              tail -n +4 "$scoreboard" \
                | sort -t '|' -k3,3nr \
                >> "$temp_sorted"

              mv "$temp_sorted" "$scoreboard"
            fi

            # Insert the scoreboard at the top of README.md
            readme="$challenge_dir/README.md"
            if [ -f "$readme" ]; then
              # Add a newline to separate the scoreboard from the rest of the content
              echo -e "\n" >> "$scoreboard"

              # Combine SCOREBOARD.md and README.md into a new README file
              cat "$scoreboard" "$readme" > "$challenge_dir/README_new.md"

              # Replace the old README.md with the new one
              mv "$challenge_dir/README_new.md" "$readme"
            else
              echo "README.md not found in $challenge_dir"
            fi
          done

      - name: Commit and Push Scoreboards
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add challenge-*/SCOREBOARD.md challenge-*/README.md
          git commit -m "Update scoreboards [skip ci]" || echo "No changes to commit"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
