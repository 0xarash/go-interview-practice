Updated Workflow

name: Update Scoreboards

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  update-scoreboards:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Run Tests and Update Scoreboards
        run: |
          for challenge_dir in challenge-*/; do
            [ -d "$challenge_dir" ] || continue
            challenge_name=$(basename "$challenge_dir")
            echo "Processing $challenge_name"

            # Ensure go.mod exists or init if missing
            if [ ! -f "$challenge_dir/go.mod" ]; then
              (cd "$challenge_dir" && go mod init "$challenge_name" && go mod tidy)
            else
              (cd "$challenge_dir" && go mod tidy)
            fi

            # Initialize scoreboard
            scoreboard="$challenge_dir/SCOREBOARD.md"
            {
              echo "# Scoreboard for $challenge_name"
              echo "| Username   | Passed Tests | Total Tests |"
              echo "|------------|--------------|-------------|"
            } > "$scoreboard"

            # Iterate over each submission
            for submission_dir in "$challenge_dir"/submissions/*/; do
              [ -d "$submission_dir" ] || continue
              USERNAME=$(basename "$submission_dir")
              echo "Testing submission from $USERNAME in $challenge_name"

              # Copy userâ€™s .go files to the challenge dir (where official tests live)
              cp "$submission_dir"/*.go "$challenge_dir/" 2>/dev/null || true

              # Run tests, capture output
              (cd "$challenge_dir" && go test -v) > "$submission_dir/test_results_raw.txt" 2>&1 || true

              # Remove ANSI color codes and other escapes from raw output
              sed -r 's/\x1B\[[0-9;]*m//g' "$submission_dir/test_results_raw.txt" > "$submission_dir/test_results.txt"

              echo "Test results for $USERNAME:"
              cat "$submission_dir/test_results.txt"

              # Check for "[no test files]" scenario
              if grep -q "[no test files]" "$submission_dir/test_results.txt"; then
                PASS_STR="N/A"
                TOTAL_STR="N/A"
              else
                # Count lines matching '--- PASS:' or '--- FAIL:' (leading spaces OK)
                PASS_COUNT=$(grep -c "^[[:space:]]*--- PASS: " "$submission_dir/test_results.txt" || true)
                FAIL_COUNT=$(grep -c "^[[:space:]]*--- FAIL: " "$submission_dir/test_results.txt" || true)
                TOTAL_TESTS=$((PASS_COUNT + FAIL_COUNT))

                PASS_STR="$PASS_COUNT"
                TOTAL_STR="$TOTAL_TESTS"
              fi

              # Append row to scoreboard
              echo "| $USERNAME | $PASS_STR | $TOTAL_STR |" >> "$scoreboard"

              # Remove user code but keep official test files (ending in _test.go)
              for f in "$challenge_dir"/*.go; do
                case "$f" in
                  *_test.go)
                    # Official test file - keep
                    ;;
                  *.go)
                    rm -f "$f"
                    ;;
                esac
              done
            done

            # Sort scoreboard by Passed Tests desc; skip top 3 lines
            if [ -s "$scoreboard" ]; then
              temp_file=$(mktemp)
              head -n 3 "$scoreboard" > "$temp_file"
              tail -n +4 "$scoreboard" \
                | sort -t '|' -k3,3nr \
                >> "$temp_file"
              mv "$temp_file" "$scoreboard"
            fi
          done

      - name: Commit and Push Scoreboards
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add challenge-*/SCOREBOARD.md
          git commit -m "Update scoreboards [skip ci]" || echo "No changes to commit"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
